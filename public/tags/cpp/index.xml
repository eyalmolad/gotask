<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on GoTask</title>
    <link>https://gotask.net/tags/cpp/</link>
    <description>Recent content in cpp on GoTask</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020–2021 ; All rights reserved.</copyright>
    <lastBuildDate>Sat, 07 Nov 2020 05:12:49 +0000</lastBuildDate><atom:link href="https://gotask.net/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MFC Dialog – Get event on the first appearance</title>
      <link>https://gotask.net/programming/mfc-dialog-get-event-on-the-first-appearance/</link>
      <pubDate>Sat, 07 Nov 2020 05:12:49 +0000</pubDate>
      
      <guid>https://gotask.net/programming/mfc-dialog-get-event-on-the-first-appearance/</guid>
      <description>
        
          &lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Sometimes we still need to maintain some legacy code that was written ages ago. A long time ago, MFC library was the default choice for many programmers wanted to develop a Windows Desktop Application in C++.  Today, there are much better alternatives for the Desktop Applications developments that include: WPF, WinForms, Electron and more. &lt;/p&gt;
&lt;p&gt;In this post, I am going to show a simple technique of how to get a callback in the CDialog derived class when the dialog is first shown.&lt;/p&gt;
&lt;h2 id=&#34;my-stack&#34;&gt;My Stack&lt;/h2&gt;
&lt;!-- /wp:paragraph --&gt;
&lt;!-- wp:list --&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2019 Community.&lt;/li&gt;
&lt;li&gt;MFC Dialog Based application (32-bit)&lt;/li&gt;
&lt;li&gt;Windows 10 Pro 64-bit (10.0, Build 19041)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-challenge&#34;&gt;The challenge&lt;/h2&gt;
&lt;p&gt;Consider the following requirement: Show a modal dialog for the user to enter a username and&lt;figure id=&#34;attachment_304&#34; aria-describedby=&#34;caption-attachment-304&#34; style=&#34;width: 357px&#34; class=&#34;wp-caption alignright&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; class=&#34; wp-image-304&#34; src=&#34;https://gotask.net/wp-content/uploads/2020/11/form_on_form.png&#34; alt=&#34;Modal dialog over dialog&#34; width=&#34;367&#34; height=&#34;223&#34; srcset=&#34;https://gotask.net/wp-content/uploads/2020/11/form_on_form.png 402w, https://gotask.net/wp-content/uploads/2020/11/form_on_form-300x182.png 300w&#34; sizes=&#34;(max-width: 367px) 100vw, 367px&#34; /&gt; &lt;figcaption id=&#34;caption-attachment-304&#34; class=&#34;wp-caption-text&#34;&gt;Modal dialog over dialog in C# Winforms&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;a password, once the main dialog has been first shown. In .NET WinForms, all we have to do is add a handler to &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.form.shown?view=netcore-3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Form.Shown&lt;/a&gt; event and show the modal dialog.   The sample code in C# would look something like:&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;csharp&#34;&gt;private void Form1_Shown(object sender, EventArgs e)
{
  using (var loginDlg = new LoginForm())
  {
    loginDlg.ShowDialog(this);
  }
}&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;MFC comes with &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/mfc/reference/cdialog-class?view=msvc-160#oninitdialog&#34;&gt;OnInitDialog&lt;/a&gt; overridable function in case we need to perform some processing during the dialog initialization. Once called, all our controls are already created and have the valid window handle. The problem with OnInitDialog function is that the dialog is not yet been shown to the user. If we attempt to show the modal dialog in the OnInitDialog function of the main dialog, the main dialog will not be shown until we close the second modal dialog. Unfortunately, MFC does not provide us with the dialog “shown” event.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;
&lt;p&gt;The main idea is to postpone the second modal dialog creation for after the main dialog has been shown. This means that after OnInitDialog, we will need to get some callback function called and display our second dialog.&lt;/p&gt;
&lt;p&gt;How do we achieve this? Fortunately, Win32 API enables us to register &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-user&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; custom windows messages &lt;/a&gt;for a private window use. We will use the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagea&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;PostMessage&lt;/a&gt; Win32 API function to post such message to our window’s thread message loop. PostMessage function returns immediately and the message handler would be called asynchronously. &lt;/p&gt;
&lt;h3 id=&#34;define-the-new-window-message&#34;&gt;Define the new window message&lt;/h3&gt;
&lt;p&gt;Every window message has it’s own unique number. According to &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-user&#34;&gt;this MSDN article&lt;/a&gt;, we can use messages from WM_USER to 0x7FFF.&lt;/p&gt;
&lt;p&gt;So lets define the message as:&lt;/p&gt;
&lt;p&gt;&lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;#define WM_FIRST_SHOWN WM_USER + 100&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-the-callback-function&#34;&gt;Adding the callback function&lt;/h3&gt;
&lt;p&gt;In the main dialog class, define the WM_FIRST_SHOWN message handler. It must have the return type of &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;LRESULT&lt;/code&gt; and get &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;WPARAM&lt;/code&gt; and &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;LPARAM&lt;/code&gt; as the function parameters although we are not going to use the parameters in this sample.&lt;/p&gt;
&lt;p&gt;Place the second dialog creation in the callback’s implementation code.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;LRESULT CMFCDialogOnLoadDlg::OnDialogShown(WPARAM,LPARAM)
{
  CLoginDialog dlg;
  dlg.DoModal();
  
  return 0;
}&lt;/pre&gt;
&lt;h3 id=&#34;adding-the-message-to-the-message-map&#34;&gt;Adding the message to the message map&lt;/h3&gt;
&lt;p&gt;We need to bind the message id (WM_FIRST_SHOWN) to the message handler function.&lt;/p&gt;
&lt;p&gt;Please the following code in your message map:&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;ON_MESSAGE(WM_FIRST_SHOWN,OnDialogShown)&lt;/pre&gt;
&lt;h3 id=&#34;posting-the-messagefigure-idattachment_310-aria-describedbycaption-attachment-310-stylewidth-352px-classwp-caption-alignright&#34;&gt;Posting the message&lt;figure id=&#34;attachment_310&#34; aria-describedby=&#34;caption-attachment-310&#34; style=&#34;width: 352px&#34; class=&#34;wp-caption alignright&#34;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; class=&#34;size-full wp-image-310&#34; src=&#34;https://gotask.net/wp-content/uploads/2020/11/dialog_on_dialog.png&#34; alt=&#34;Dialog on dialog in MFC&#34; width=&#34;362&#34; height=&#34;263&#34; srcset=&#34;https://gotask.net/wp-content/uploads/2020/11/dialog_on_dialog.png 362w, https://gotask.net/wp-content/uploads/2020/11/dialog_on_dialog-300x218.png 300w&#34; sizes=&#34;(max-width: 362px) 100vw, 362px&#34; /&gt; &lt;figcaption id=&#34;caption-attachment-310&#34; class=&#34;wp-caption-text&#34;&gt;Dialog on dialog in MFC&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Finally, we need to post the WM_FIRST_SHOWN message to the main window’s thread message queue. Place the following code to the end of you OnInitDialog memeber function.&lt;/p&gt;
&lt;p&gt;&lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;PostMessage(WM_FIRST_SHOWN);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MFC source code available at &lt;a href=&#34;https://github.com/eyalmolad/gotask/tree/master/MFC/MFCDialogOnLoad&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C# Source code available at &lt;a href=&#34;https://github.com/eyalmolad/gotask/tree/master/Winforms/WindowsFormsDialogOnLoad&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Serialize and Deserialize array in C&#43;&#43; using RapidJSON</title>
      <link>https://gotask.net/programming/serialize-and-deserialize-array-in-cpp-using-rapidjson/</link>
      <pubDate>Tue, 28 Apr 2020 18:56:46 +0000</pubDate>
      
      <guid>https://gotask.net/programming/serialize-and-deserialize-array-in-cpp-using-rapidjson/</guid>
      <description>
        
          &lt;p&gt;In my previous article, I covered &lt;a href=&#34;https://gotask.net/programming/serialize-and-deserialize-object-in-cpp-using-rapidjson/&#34;&gt;serializing/deserializing JSON&lt;/a&gt; in C++ to a simple object using &lt;a href=&#34;https://rapidjson.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;RapidJSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When working with JSON, my goal is to work always with object models and keep the actual JSON parsing behind the scenes. This keeps the readability and maintainability of the code as JSON manipulation, type checking and exception handling is done is a single class and not across the entire application. This also enables a future replacement of the JSON parsing library without the need to change the code of the entire application.&lt;/p&gt;
&lt;h2 id=&#34;my-stack&#34;&gt;My stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2019 Community Edition, 16.5.1&lt;/li&gt;
&lt;li&gt;RapidJSON 1.1.0 release&lt;/li&gt;
&lt;li&gt;Windows 10 Pro 64-bit (10.0, Build 18363)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;preparing-the-project&#34;&gt;Preparing the project&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I am going to use the same C++ Console Application from the previous post about &lt;a href=&#34;https://gotask.net/programming/serialize-and-deserialize-object-in-cpp-using-rapidjson/&#34;&gt;JSON Serialization in C++&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My JSON will be an array of products in an inventory. Here is the sample of 3 products in inventory:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;[
  {
    &#34;id&#34;: 1,
    &#34;name&#34;: &#34;Bush Somerset Collection Bookcase&#34;,
    &#34;category&#34;: &#34;Furniture&#34;,
    &#34;sales&#34;: 22.0
  },
  {
    &#34;id&#34;: 2,
    &#34;name&#34;: &#34;Mitel 5320 IP Phone VoIP phone&#34;,
    &#34;category&#34;: &#34;Technology&#34;,
    &#34;sales&#34;: 907.1519775390625
  },
  {
    &#34;id&#34;: 3,
    &#34;name&#34;: &#34;Poly String Tie Envelopes&#34;,
    &#34;category&#34;: &#34;Office Supplies&#34;,
    &#34;sales&#34;: 3.2639999389648439
  }
]&lt;/pre&gt;
&lt;h2 id=&#34;creating-the-object-models&#34;&gt;Creating the object models&lt;/h2&gt;
&lt;p&gt;For the single product, we used the following object model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We added member variable for every JSON property with the correct type (id, name, sales, category)&lt;/li&gt;
&lt;li&gt;Implemented getters/setters&lt;/li&gt;
&lt;li&gt;Implemented Serialize and Deserialize functions&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;namespace JSONModels
{
  class Product : public JSONBase
  {
  public:
    Product();		
    virtual ~Product();			

    virtual bool Deserialize(const rapidjson::Value&amp; obj);
    virtual bool Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt;* writer) const;

    // Getters/Setters.
    const std::string&amp; Name() const { return _name; }
    void Name(const std::string&amp; name) { _name = name; }

    const std::string&amp; Category() const { return _category; }
    void Category(const std::string&amp; category) { _category = category; }

    float Sales() const { return _sales; }
    void Sales(float sales) { _sales = sales; }

    int Id() const { return _id; }
    void Id(int id) { _id = id; }		
  private:
    std::string _name;
    std::string _category;
    float _sales;
    int _id;
  };	
}&lt;/pre&gt;
&lt;p&gt;In the next step, we need to create a class that will hold a list of &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;Product&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;namespace JSONModels
{
  class Products : public JSONBase
  {
  public:		
    virtual ~Products() {};
    virtual bool Deserialize(const std::string&amp; s);		

    // Getters/Setters.
    std::list&amp;lt;Product&amp;gt;&amp; ProductsList() { return _products; }
  public:
    virtual bool Deserialize(const rapidjson::Value&amp; obj) { return false; };
    virtual bool Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt;* writer) const;
  private:
    std::list&amp;lt;Product&amp;gt; _products;
  };
}&lt;/pre&gt;
&lt;h3 id=&#34;serialize&#34;&gt;Serialize&lt;/h3&gt;
&lt;p&gt;This function is called by JSONBase class once the object is being serialized. Our list is stored in the memory, so we need to write it to the &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;StringBuffer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this code, we iterate over all Product in our &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;_product&lt;/code&gt; list and call for Serialize function of the Product class.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;bool Products::Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt;* writer) const
{
  writer-&amp;gt;StartArray();

     for (std::list&amp;lt;Product&amp;gt;::const_iterator it = _products.begin(); it != _products.end(); it++)
     {
        (*it).Serialize(writer);
     }
  writer-&amp;gt;EndArray();

  return true;
}&lt;/pre&gt;
&lt;h3 id=&#34;deserialize&#34;&gt;Deserialize&lt;/h3&gt;
&lt;p&gt;Deserialize function is called by JSONBase class with JSON string parameter.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First we need to call for &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;InitDocument&lt;/code&gt; function to parse the string&lt;/li&gt;
&lt;li&gt;Once the &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;doc&lt;/code&gt; object is initialized, we need to iterate over all JSON objects, call for Deserialize and finally add to _products list.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;bool Products::Deserialize(const std::string&amp; s)
{
  rapidjson::Document doc;
  if (!InitDocument(s, doc))
    return false;

  if (!doc.IsArray())
    return false;

  for (rapidjson::Value::ConstValueIterator itr = doc.Begin(); itr != doc.End(); ++itr)
  {
    Product p;
    p.Deserialize(*itr);
    _products.push_back(p);
  }

  return true;
}&lt;/pre&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;h3 id=&#34;loading-json-array-from-file&#34;&gt;Loading JSON array from file&lt;/h3&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;// load json array
JSONModels::Products products;
products.DeserializeFromFile(&#34;DataSampleArray.json&#34;);

for (std::list&amp;lt;JSONModels::Product&amp;gt;::const_iterator it = products.ProductsList().begin();
  it != products.ProductsList().end(); it++)
{
  // print some values.
  printf(&#34;Name:%s, Sales:%.3f&#34;, (*it).Name().c_str(), (*it).Sales());
}&lt;/pre&gt;
&lt;h3 id=&#34;adding-a-new-object-to-the-existing-list&#34;&gt;Adding a new object to the existing list&lt;/h3&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;// add new product
JSONModels::Product newProduct;
newProduct.Id(101);
newProduct.Name(&#34;Global Value Mid-Back Manager&#39;s Chair, Gray&#34;);
newProduct.Category(&#34;Furniture&#34;);
newProduct.Sales(213.115f);    
products.ProductsList().push_back(product);&lt;/pre&gt;
&lt;h3 id=&#34;saving-the-list-to-a-new-file&#34;&gt;Saving the list to a new file&lt;/h3&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;// save to new array file.
products.SerializeToFile(&#34;DataSampleArrayNew.json&#34;)&lt;/pre&gt;
&lt;h2 id=&#34;useful-resources&#34;&gt;Useful resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Full source code of this post in &lt;a href=&#34;https://github.com/eyalmolad/gotask/tree/master/C%2B%2B/RapidJSONSample&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Serialize and Deserialize object in C&#43;&#43; using RapidJSON</title>
      <link>https://gotask.net/programming/serialize-and-deserialize-object-in-cpp-using-rapidjson/</link>
      <pubDate>Wed, 08 Apr 2020 20:12:03 +0000</pubDate>
      
      <guid>https://gotask.net/programming/serialize-and-deserialize-object-in-cpp-using-rapidjson/</guid>
      <description>
        
          &lt;p&gt;In one of my projects in C++, I had to work with an input in JSON format as we were using Django Web API that produces a JSON response for REST API calls.&lt;/p&gt;
&lt;p&gt;Parsing the JSON format in C++ should be easy with the open source libraries such as &lt;a href=&#34;https://rapidjson.org&#34;&gt;RapidJSON&lt;/a&gt;, &lt;a href=&#34;https://github.com/nlohmann/json&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;nlohmann/jsonm&lt;/a&gt;, &lt;a href=&#34;https://github.com/CPPAlliance/json&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Boost.JSON.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My goal was to work with strongly-typed objects and keep the parsing behind the scenes.&lt;/p&gt;
&lt;p&gt;Such task sounds trivial if you work in C# or other programming language that supports reflection, but in C++ it requires a bit more work.&lt;/p&gt;
&lt;p&gt;Full source code of this post in &lt;a href=&#34;https://github.com/eyalmolad/gotask/tree/master/C%2B%2B/RapidJSONSample&#34;&gt;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;my-stack&#34;&gt;My stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2019 Community Edition, 16.5.1&lt;/li&gt;
&lt;li&gt;RapidJSON 1.1.0 release&lt;/li&gt;
&lt;li&gt;Windows 10 Pro 64-bit (10.0, Build 18363)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;preparing-the-project&#34;&gt;Preparing the project&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In Visual Studio, create a new Console Application in C++. It can be both, 32-bit or 64-bit.&lt;/li&gt;
&lt;li&gt;In Windows Explorer, open the root folder of the project in command line prompt.&lt;/li&gt;
&lt;li&gt;Clone the RapidJSON repository using the following command line:
&lt;li style=&#34;list-style-type: none;&#34;&gt;
 &lt;ul&gt;
   &lt;li&gt;
     &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;msdos&#34;&gt;git clone https://github.com/Tencent/rapidjson.git&lt;/code&gt;
   &lt;/li&gt;
 &lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;I am going to use a very simple JSON  that represents a product in an inventory. It has a few properties of different types: &lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;json&#34;&gt;{
&amp;quot;id&amp;quot;: 9,
&amp;quot;name&amp;quot;: &amp;quot;Bush Somerset Collection Bookcase&amp;quot;,
&amp;quot;category&amp;quot;: &amp;quot;Furniture&amp;quot;,
&amp;quot;sales&amp;quot;:122.0
}&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;creating-the-object-model&#34;&gt;Creating the object model&lt;/h2&gt;
&lt;p&gt;As I mentioned before, in the serialize/deserialize process I want to be able to work with classes with strongly typed members and accessors functions.&lt;/p&gt;
&lt;p&gt;For this purpose, I created an abstract base class &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;JSONBase&lt;/code&gt; that provides following capabilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document parsing using RapidJSON&lt;/li&gt;
&lt;li&gt;Serializing to file and Deserializing from file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inheriting from JSONBase requires an implementation of Serialize and Deserialize pure virtual functions.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;class JSONBase
{
public:	
  bool DeserializeFromFile(const std::string&amp; filePath);
  bool SerializeToFile(const std::string&amp; filePath);	

  virtual std::string Serialize() const;
  virtual bool Deserialize(const std::string&amp; s);

  virtual bool Deserialize(const rapidjson::Value&amp; obj) = 0;
  virtual bool Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt;* writer) const = 0;
protected:
  bool InitDocument(const std::string &amp; s, rapidjson::Document &amp;doc);
};&lt;/pre&gt;
&lt;h2 id=&#34;creating-the-product-class&#34;&gt;Creating the Product class&lt;/h2&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;class Product : public JSONBase
{
public:
  Product();		
  virtual ~Product();			

  virtual bool Deserialize(const rapidjson::Value&amp; obj);
  virtual bool Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt;* writer) const;

  // Getters/Setters.
  const std::string&amp; Name() const { return _name; }
  void Name(const std::string&amp; name) { _name = name; }

  const std::string&amp; Category() const { return _category; }
  void Category(const std::string&amp; category) { _category = category; }

  float Sales() const { return _sales; }
  void Sales(float sales) { _sales = sales; }

  int Id() const { return _id; }
  void Id(int id) { _id = id; }		
private:
  std::string _name;
  std::string _category;
  float _sales;
  int _id;
};&lt;/pre&gt;
&lt;p&gt;As my goal is to work with objects and not JSON, we need following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a class that derives from JSONBase that represents a Product.&lt;/li&gt;
&lt;li&gt;Add member variables to the class. (id, name, category, sales)&lt;/li&gt;
&lt;li&gt;Add Getters/Setters for member variables.&lt;/li&gt;
&lt;li&gt;Implement the pure virtual functions Serialize and Deserialize&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serialize&#34;&gt;Serialize&lt;/h3&gt;
&lt;p&gt;This function is called by the JSON base class passing the &lt;code class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;StringBuffer&lt;/code&gt; pointer. We need to write the property names and values to the buffer.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;bool Product::Serialize(rapidjson::Writer&amp;lt;rapidjson::StringBuffer&amp;gt; * writer) const
{
  writer-&amp;gt;StartObject();

    writer-&amp;gt;String(&#34;id&#34;); // create Id property
    writer-&amp;gt;Int(_id);     // write the Id value from the object instance

    writer-&amp;gt;String(&#34;name&#34;);
    writer-&amp;gt;String(_name.c_str());

    writer-&amp;gt;String(&#34;category&#34;);
    writer-&amp;gt;String(_category.c_str());

    writer-&amp;gt;String(&#34;sales&#34;);
    writer-&amp;gt;Double(_sales);

  writer-&amp;gt;EndObject();

  return true;
}&lt;/pre&gt;
&lt;h3 id=&#34;deserialize&#34;&gt;Deserialize&lt;/h3&gt;
&lt;p&gt;Deserialize function is called by JSONBase class with the current object being parsed. We need to call the setter functions of our object to update the value from JSON.&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;bool Product::Deserialize(const rapidjson::Value &amp; obj)
{
  Id(obj[&#34;id&#34;].GetInt());
  Name(obj[&#34;name&#34;].GetString());
  Category(obj[&#34;category&#34;].GetString());
  Sales(obj[&#34;sales&#34;].GetFloat());

  return true;
}&lt;/pre&gt;
&lt;p&gt;Notice that you should access every property with the correct type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int – GetInt()&lt;/li&gt;
&lt;li&gt;int64 – GetInt64()&lt;/li&gt;
&lt;li&gt;string – GetString()&lt;/li&gt;
&lt;li&gt;float – GetFloat()&lt;/li&gt;
&lt;li&gt;double – GetDouble()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check this section in &lt;a href=&#34;https://rapidjson.org/md_doc_tutorial.html#QueryNumber&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;RapidJSON tutorial&lt;/a&gt; for more info about the supported types.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;After we’ve done all the hard work with defining the classes, the usage is very straight forward:&lt;/p&gt;
&lt;h3 id=&#34;loading-json-from-file&#34;&gt;Loading JSON from file&lt;/h3&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;JSONModels::Product product;
product.DeserializeFromFile(&#34;DataSample.json&#34;);
printf(&#34;Name:%s, Sales:%.3f&#34;, product.Name().c_str(), product.Sales());&lt;/pre&gt;
&lt;h3 id=&#34;loading-json-from-file-changing-values-to-writing-back-to-file&#34;&gt;Loading JSON from file, changing values to writing back to file&lt;/h3&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;cpp&#34;&gt;JSONModels::Product product;
product.DeserializeFromFile(&#34;DataSample.json&#34;);            
product.Sales(product.Sales() + 100.0f); // increase the sales by 100
product.SerializeToFile(&#34;DataSampleNew.json&#34;);&lt;/pre&gt;
&lt;p&gt;In the next article, I am going to cover serializing/deserialzing JSON arrays in C++.&lt;/p&gt;
&lt;h2 id=&#34;useful-resources&#34;&gt;Useful resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Full source code of this post in &lt;a href=&#34;https://github.com/eyalmolad/gotask/tree/master/C%2B%2B/RapidJSONSample&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
